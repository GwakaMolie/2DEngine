#include "InputHandler.hpp"
#include <iostream>
#include "Game.hpp"
#include "Vector2D.hpp"

InputHandler::InputHandler(){}
InputHandler::~InputHandler(){}

InputHandler* InputHandler::s_pInstance = nullptr;


InputHandler* InputHandler::Instance(){

    if(s_pInstance == 0) {

        s_pInstance = new InputHandler();
    }
    return s_pInstance;

}

void InputHandler::initialiseJoysticks(){

    // mouse INIT
    for(int i = 0; i < 3; i++) {
        this->m_mouseButtonStates.push_back(false); 
    }

    this->m_mousePosition = new Vector2D();

    // Joystick INIT

    if(SDL_WasInit(SDL_INIT_JOYSTICK) == 0){
        SDL_InitSubSystem(SDL_INIT_JOYSTICK);
        std::cout << "Joystick Sub-system Initilazed" << std::endl;

    }

    if(SDL_NumJoysticks() > 0){
        for(int i = 0; i < SDL_NumJoysticks(); i++) {

            SDL_Joystick* joy = SDL_JoystickOpen(i);

            if(joy) {
                this->m_joysticks.push_back(joy); 
                m_joystickValues.push_back(std::make_pair(new Vector2D(0,0), new Vector2D(0,0))); 

                std::vector<bool> tempButtons;

                for (int j = 0; j < SDL_JoystickNumButtons(joy); j++) {
                    tempButtons.push_back(false);
                }
                m_joyButtonStates.push_back(tempButtons);
                
            } 
            else {
                std::cout << SDL_GetError();
            }
        }
        SDL_JoystickEventState(SDL_ENABLE);
        this->m_bJoysticksInitialised = true;
        std::cout << "Initialised "<< this->m_joysticks.size() << " joystick(s)" << std::endl;
    }
    else{
        this->m_bJoysticksInitialised = false;
        std::cout << "Joystick Not Found !" << std::endl;
    }
}

bool InputHandler::joysticksInitialised(){
    
    return m_bJoysticksInitialised; 
}

void InputHandler::update(){
    SDL_Event event;

    while(SDL_PollEvent(&event)) {
        if(event.type == SDL_QUIT) {
            TheGame::Instance()->quit();
        }

        // mouse motion handler
        if(event.type == SDL_MOUSEMOTION) { // check type value
            this->m_mousePosition->setX(event.motion.x);
            this->m_mousePosition->setY(event.motion.y);
        }

        // mouse handler
        if(event.type == SDL_MOUSEBUTTONDOWN) { // check type value
            if(event.button.button == SDL_BUTTON_LEFT){
                this->m_mouseButtonStates[LEFT] = true;
            }

            if(event.button.button == SDL_BUTTON_MIDDLE){
                this->m_mouseButtonStates[MIDDLE] = true;
            }

            if(event.button.button == SDL_BUTTON_RIGHT){
                this->m_mouseButtonStates[RIGHT] = true;
            }

        }

        if(event.type == SDL_MOUSEBUTTONUP) { // check type value
            if(event.button.button == SDL_BUTTON_LEFT){
                this->m_mouseButtonStates[LEFT] = false;
            }

            if(event.button.button == SDL_BUTTON_MIDDLE){
                this->m_mouseButtonStates[MIDDLE] = false;
            }

            if(event.button.button == SDL_BUTTON_RIGHT){
                this->m_mouseButtonStates[RIGHT] = false;
            }

        }

        // joystick handler
        if(event.type == SDL_JOYAXISMOTION) { // check type value
            int whichOne = event.jaxis.which; // get which controller

            // left stick move left or right
            if(event.jaxis.axis == 0) {
                if (event.jaxis.value > m_joystickDeadZone) {
                    m_joystickValues[whichOne].first->setX(1);
                }
                else if(event.jaxis.value < -m_joystickDeadZone) {
                    m_joystickValues[whichOne].first->setX(-1);
                }
                else {
                    m_joystickValues[whichOne].first->setX(0);
                }
            }
            // left stick move up or down
            if(event.jaxis.axis == 1) {
                if (event.jaxis.value > m_joystickDeadZone) {
                    m_joystickValues[whichOne].first->setY(1);
                }
                else if(event.jaxis.value < -m_joystickDeadZone) {
                    m_joystickValues[whichOne].first->setY(-1);
                }
                else {
                    m_joystickValues[whichOne].first->setY(0);
                }
            }

        }

        //handling Joystick button presses
        if(event.type == SDL_JOYBUTTONDOWN){
            int whichOne =  event.jbutton.which;
            this->m_joyButtonStates[whichOne][event.jbutton.button] = true;
        }
        
        if(event.type == SDL_JOYBUTTONUP){
            int whichOne =  event.jbutton.which;
            this->m_joyButtonStates[whichOne][event.jbutton.button] = false;
        }

    }
}

bool InputHandler::getMouseButtonState(int buttonNumber){
  return this->m_mouseButtonStates[buttonNumber];
}

Vector2D* InputHandler::getMousePosition(){
    return this->m_mousePosition;
}

int InputHandler::xvalue(int joy, int stick){
    if(m_joystickValues.size() > 0){
        if(stick == 1) {
            return m_joystickValues[joy].first->getX();
        }
        else if(stick == 2) {
            return m_joystickValues[joy].second->getX();
        }
    }
    return 0;
}

int InputHandler::yvalue(int joy, int stick){
    if(m_joystickValues.size() > 0){
        if(stick == 1) {
            return m_joystickValues[joy].first->getY();
        }
        else if(stick == 2) {
            return m_joystickValues[joy].second->getY();
        }
    }
    return 0;
}

bool InputHandler::getJoyButtonState(int joy, int buttonNumber){
    return this->m_joyButtonStates[joy][buttonNumber];
    
}

void InputHandler::clean(){
    if(m_bJoysticksInitialised) {
        for(int i = 0; i < SDL_NumJoysticks(); i++){
            SDL_JoystickClose(this->m_joysticks[i]);
        }
    }
}